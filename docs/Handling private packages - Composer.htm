<!DOCTYPE html>
<!-- saved from url=(0065)https://getcomposer.org/doc/articles/handling-private-packages.md -->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers no-applicationcache svg inlinesvg smil svgclippaths" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

        <title>Handling private packages - Composer</title>
        <meta name="description" content="A Dependency Manager for PHP">
        <meta name="viewport" content="width=device-width,initial-scale=1">

        <link rel="stylesheet" href="./Handling private packages - Composer_files/style.css">
        <link rel="stylesheet" href="./Handling private packages - Composer_files/prism.css">

        <script async="" src="./Handling private packages - Composer_files/analytics.js"></script><script src="./Handling private packages - Composer_files/modernizr-2.0.6.min.js"></script>

        <link rel="stylesheet" href="./Handling private packages - Composer_files/docsearch.min.css">
    </head>

    <body>
        <div id="container">
            <header>
                                    <a href="https://getcomposer.org/" title="Go back to the homepage" aria-label="Go back to the homepage">üè† Home</a><a class="" href="https://getcomposer.org/doc/00-intro.md" title="Getting started with Composer" aria-label="Getting started with Composer">Getting Started</a><a class="" href="https://getcomposer.org/download/" title="Go the the Download page to see how to download Composer" aria-label="Go the the Download page to see how to download Composer">Download</a><a class="active" href="https://getcomposer.org/doc/" title="View the Composer documentation" aria-label="View the Composer documentation">Documentation</a><a class="last" href="https://packagist.org/" title="Browse Composer packages on packagist.org (external link to Packagist.org)" aria-label="Browse Composer packages on packagist.org (external link to Packagist.org)">Browse
                            Packages</a>                            </header>
            <main role="main">
                <div id="main">
                    
    <div id="searchbar" class="clearfix">
        <span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;"><input id="docsearch" type="text" placeholder="Type here to search documentation..." title="Enter text here and submit to search the documentation" class="ds-input" autocomplete="off" spellcheck="false" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-label="search input" aria-owns="algolia-autocomplete-listbox-0" dir="auto" style="position: relative; vertical-align: top;"><pre aria-hidden="true" style="position: absolute; visibility: hidden; white-space: pre; font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre><span class="ds-dropdown-menu" role="listbox" id="algolia-autocomplete-listbox-0" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;"><div class="ds-dataset-1"></div></span></span>
    </div>

            <ul class="toc">
                
                                        
        </ul>
    
    <h1 id="handling-private-packages">Handling private packages<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#handling-private-packages" class="anchor">#</a></h1>
<h1 id="private-packagist">Private Packagist<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#private-packagist" class="anchor">#</a></h1>
<p><a href="https://packagist.com/">Private Packagist</a> is a commercial package hosting product
offering professional support and web based management of private and public packages,
and granular access permissions. Private Packagist provides mirroring for packages' zip
files which makes installs faster and independent from third party systems - e.g.
you can deploy even if GitHub is down because your zip files are mirrored.</p>
<p>Private Packagist is available as a hosted SaaS solution or as an on-premise self-hosted
package, providing an interactive set up experience.</p>
<p>Some of Private Packagist's revenue is used to pay for Composer and Packagist.org
development and hosting so using it is a good way to support the maintenance of
these open source projects financially. You can find more information about how to
set up your own package archive on <a href="https://packagist.com/">Packagist.com</a>.</p>
<h1 id="satis">Satis<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#satis" class="anchor">#</a></h1>
<p>Satis on the other hand is open source but only a static <code>composer</code> repository
generator. It is a bit like an ultra-lightweight, static file-based version of
packagist and can be used to host the metadata of your company's private
packages, or your own. You can get it from
<a href="https://github.com/composer/satis">GitHub</a> or install via CLI:</p>
<pre><code>php composer.phar create-project composer/satis --stability=dev --keep-vcs</code></pre>
<h2 id="setup">Setup<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#setup" class="anchor">#</a></h2>
<p>For example let's assume you have a few packages you want to reuse across your
company but don't really want to open-source. You would first define a Satis
configuration: a json file with an arbitrary name that lists your curated
<a href="https://getcomposer.org/doc/05-repositories.md">repositories</a>.</p>
<p>Here is an example configuration, you see that it holds a few VCS repositories,
but those could be any types of <a href="https://getcomposer.org/doc/05-repositories.md">repositories</a>. Then it
uses <code>"require-all": true</code> which selects all versions of all packages in the
repositories you defined.</p>
<p>The default file Satis looks for is <code>satis.json</code> in the root of the repository.</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"My Repository"</span><span class="token punctuation">,</span>
  <span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"http://packages.example.org"</span><span class="token punctuation">,</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://svn.example.org/private/repo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo2"</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"require-all"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<p>If you want to cherry pick which packages you want, you can list all the
packages you want to have in your satis repository inside the classic composer
<code>require</code> key, using a <code>"*"</code> constraint to make sure all versions are selected,
or another constraint if you want really specific versions.</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://svn.example.org/private/repo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo2"</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"require"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"company/package"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>
    <span class="token string">"company/package2"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>
    <span class="token string">"company/package3"</span><span class="token punctuation">:</span> <span class="token string">"2.0.0"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Once you've done this, you run:</p>
<pre><code>php bin/satis build &lt;configuration file&gt; &lt;build dir&gt;</code></pre>
<p>When you ironed out that process, what you would typically do is run this
command as a cron job on a server. It would then update all your package info
much like Packagist does.</p>
<p>Note that if your private packages are hosted on GitHub, your server should
have an ssh key that gives it access to those packages, and then you should add
the <code>--no-interaction</code> (or <code>-n</code>) flag to the command to make sure it falls back
to ssh key authentication instead of prompting for a password. This is also a
good trick for continuous integration servers.</p>
<p>Set up a virtual-host that points to that <code>web/</code> directory, let's say it is
<code>packages.example.org</code>. Alternatively, with PHP &gt;= 5.4.0, you can use the
built-in CLI server <code>php -S localhost:port -t satis-output-dir/</code> for a
temporary solution.</p>
<h3 id="partial-updates">Partial Updates<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#partial-updates" class="anchor">#</a></h3>
<p>You can tell Satis to selectively update only particular packages or process
only a repository with a given URL. This cuts down the time it takes to rebuild
the <code>package.json</code> file and is helpful if you use (custom) webhooks to trigger
rebuilds whenever code is pushed into one of your repositories.</p>
<p>To rebuild only particular packages, pass the package names on the command line
like so:</p>
<pre><code>php bin/satis build satis.json web/ this/package that/other-package</code></pre>
<p>Note that this will still need to pull and scan all of your VCS repositories
because any VCS repository might contain (on any branch) one of the selected
packages.</p>
<p>If you want to scan only the selected package and not all VCS repositories you need
to declare a <em>name</em> for all your package (this only work on VCS repositories type) :</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"company/privaterepo"</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"private/repo"</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://svn.example.org/private/repo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"mycompany/privaterepo2"</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"vcs"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/mycompany/privaterepo2"</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>If you want to scan only a single repository and update all packages found in
it, pass the VCS repository URL as an optional argument:</p>
<pre><code>php bin/satis build --repository-url https://only.my/repo.git satis.json web/</code></pre>
<h2 id="usage">Usage<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#usage" class="anchor">#</a></h2>
<p>In your projects all you need to add now is your own composer repository using
the <code>packages.example.org</code> as URL, then you can require your private packages
and everything should work smoothly. You don't need to copy all your
repositories in every project anymore. Only that one unique repository that
will update itself.</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"composer"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://packages.example.org/"</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"require"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"company/package"</span><span class="token punctuation">:</span> <span class="token string">"1.2.0"</span><span class="token punctuation">,</span>
    <span class="token string">"company/package2"</span><span class="token punctuation">:</span> <span class="token string">"1.5.2"</span><span class="token punctuation">,</span>
    <span class="token string">"company/package3"</span><span class="token punctuation">:</span> <span class="token string">"dev-master"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="security">Security<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#security" class="anchor">#</a></h3>
<p>To secure your private repository you can host it over SSH or SSL using a client
certificate. In your project you can use the <code>options</code> parameter to specify the
connection options for the server.</p>
<p>Example using a custom repository using SSH (requires the SSH2 PECL extension):</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"composer"</span><span class="token punctuation">,</span>
    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"ssh2.sftp://example.org"</span><span class="token punctuation">,</span>
    <span class="token string">"options"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"ssh2"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"composer"</span><span class="token punctuation">,</span>
        <span class="token string">"pubkey_file"</span><span class="token punctuation">:</span> <span class="token string">"/home/composer/.ssh/id_rsa.pub"</span><span class="token punctuation">,</span>
        <span class="token string">"privkey_file"</span><span class="token punctuation">:</span> <span class="token string">"/home/composer/.ssh/id_rsa"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p><strong>Tip:</strong> See <a href="https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options">ssh2 context options</a> for more information.</p>
</blockquote>
<p>Example using SSL/TLS (HTTPS) using a client certificate:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
     <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"composer"</span><span class="token punctuation">,</span>
     <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://example.org"</span><span class="token punctuation">,</span>
     <span class="token string">"options"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token string">"ssl"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token string">"local_cert"</span><span class="token punctuation">:</span> <span class="token string">"/home/composer/.ssl/composer.pem"</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p><strong>Tip:</strong> See <a href="https://secure.php.net/manual/en/context.ssl.php">ssl context options</a> for more information.</p>
</blockquote>
<p>Example using a custom HTTP Header field for token authentication:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"repositories"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"composer"</span><span class="token punctuation">,</span>
    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://example.org"</span><span class="token punctuation">,</span>
    <span class="token string">"options"</span><span class="token punctuation">:</span>  <span class="token punctuation">{</span>
      <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"header"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token string">"API-TOKEN: YOUR-API-TOKEN"</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="authentication">Authentication<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#authentication" class="anchor">#</a></h3>
<p>Authentication can be handled in <a href="https://getcomposer.org/doc/articles/authentication-for-private-packages.md">several different ways</a>.</p>
<h3 id="downloads">Downloads<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#downloads" class="anchor">#</a></h3>
<p>When GitHub, GitLab or BitBucket repositories are mirrored on your local satis, the
build process will include the location of the downloads these platforms make
available. This means that the repository and your setup depend on the
availability of these services.</p>
<p>At the same time, this implies that all code which is hosted somewhere else (on
another service or for example in Subversion) will not have downloads available
and thus installations usually take a lot longer.</p>
<p>To enable your satis installation to create downloads for all (Git, Mercurial
and Subversion) your packages, add the following to your <code>satis.json</code>:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"archive"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"directory"</span><span class="token punctuation">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>
    <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>
    <span class="token string">"prefix-url"</span><span class="token punctuation">:</span> <span class="token string">"https://amazing.cdn.example.org"</span><span class="token punctuation">,</span>
    <span class="token string">"skip-dev"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="options-explained">Options explained<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#options-explained" class="anchor">#</a></h4>
<ul>
<li><code>directory</code>: required, the location of the dist files (inside the
<code>output-dir</code>)</li>
<li><code>format</code>: optional, <code>zip</code> (default) or <code>tar</code></li>
<li><code>prefix-url</code>: optional, location of the downloads, homepage (from
<code>satis.json</code>) followed by <code>directory</code> by default</li>
<li><code>skip-dev</code>: optional, <code>false</code> by default, when enabled (<code>true</code>) satis will
not create downloads for branches</li>
<li><code>absolute-directory</code>: optional, a <em>local</em> directory where the dist files are
dumped instead of <code>output-dir</code>/<code>directory</code></li>
<li><code>whitelist</code>: optional, if set as a list of package names, satis will only
dump the dist files of these packages</li>
<li><code>blacklist</code>: optional, if set as a list of package names, satis will not
dump the dist files of these packages</li>
<li><code>checksum</code>: optional, <code>true</code> by default, when disabled (<code>false</code>) satis will
not provide the sha1 checksum for the dist files</li>
</ul>
<p>Once enabled, all downloads (include those from GitHub and BitBucket) will be
replaced with a <em>local</em> version.</p>
<h4 id="prefix-url">prefix-url<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#prefix-url" class="anchor">#</a></h4>
<p>Prefixing the URL with another host is especially helpful if the downloads end
up in a private Amazon S3 bucket or on a CDN host. A CDN would drastically
improve download times and therefore package installation.</p>
<p>Example: A <code>prefix-url</code> of <code>https://my-bucket.s3.amazonaws.com</code> (and
<code>directory</code> set to <code>dist</code>) creates download URLs which look like the following:
<code>https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip</code>.</p>
<h3 id="web-outputs">Web outputs<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#web-outputs" class="anchor">#</a></h3>
<ul>
<li><code>output-html</code>: optional, <code>true</code> by default, when disabled (<code>false</code>) satis
will not generate the <code>output-dir</code>/index.html page.</li>
<li><code>twig-template</code>: optional, a path to a personalized <a href="https://twig.sensiolabs.org/">Twig</a> template for
the <code>output-dir</code>/index.html page.</li>
</ul>
<h3 id="abandoned-packages">Abandoned packages<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#abandoned-packages" class="anchor">#</a></h3>
<p>To enable your satis installation to indicate that some packages are abandoned,
add the following to your <code>satis.json</code>:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"abandoned"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"company/package"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"company/package2"</span><span class="token punctuation">:</span> <span class="token string">"company/newpackage"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>The <code>true</code> value indicates that the package is truly abandoned while the
<code>"company/newpackage"</code> value specifies that the package is replaced by the
<code>company/newpackage</code> package.</p>
<p>Note that all packages set as abandoned in their own <code>composer.json</code> file will
be marked abandoned as well.</p>
<h3 id="resolving-dependencies">Resolving dependencies<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#resolving-dependencies" class="anchor">#</a></h3>
<p>It is possible to make satis automatically resolve and add all dependencies for
your projects. This can be used with the Downloads functionality to have a
complete local mirror of packages. Add the following to your <code>satis.json</code>:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"require-dependencies"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"require-dev-dependencies"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<p>When searching for packages, satis will attempt to resolve all the required
packages from the listed repositories.  Therefore, if you are requiring a
package from Packagist, you will need to define it in your <code>satis.json</code>.</p>
<p>Dev dependencies are packaged only if the <code>require-dev-dependencies</code> parameter
is set to true.</p>
<h3 id="other-options">Other options<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#other-options" class="anchor">#</a></h3>
<ul>
<li><code>providers</code>: optional, <code>false</code> by default, when enabled (<code>true</code>) each
package will be dumped into a separate include file which will be only
loaded by composer when the package is really required. Speeds up composer
handling for repositories with huge number of packages like f.i. packagist.</li>
<li><code>output-dir</code>: optional, defines where to output the repository files if not
provided as an argument when calling the <code>build</code> command.</li>
<li><code>config</code>: optional, lets you define all config options from composer, except
<code>archive-format</code> and <code>archive-dir</code> as the configuration is done through
<a href="https://getcomposer.org/doc/articles/handling-private-packages.md#downloads">archive</a> instead. See docs on <a href="https://getcomposer.org/doc/04-schema.md#config">config schema</a> for more details.</li>
<li><code>notify-batch</code>: optional, specify a URL that will be called every time a
user installs a package. See <a href="https://getcomposer.org/doc/05-repositories.md#notify-batch">notify-batch</a>.</li>
</ul>

    <p class="fork-and-edit">
        Found a typo? Something is wrong in this documentation?
        <a href="https://github.com/composer/composer/edit/master/doc/articles/handling-private-packages.md" title="Go to the doc master to fork and propose updates (external link)" aria-label="Go to the doc master to fork and propose updates (external link)">Fork and edit</a> it!
    </p>
                </div>
            </main>
            <footer>
                                
                <p class="license">
                    Composer and all content on this site are released under the <a href="https://github.com/composer/composer/blob/master/LICENSE" title="View the MIT license (external link to GitHub.com)" aria-label="View the MIT license (external link to GitHub.com)">MIT license</a>.
                </p>
            </footer>
        </div>

        <script src="./Handling private packages - Composer_files/prism.js"></script>
        <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('set', 'anonymizeIp', true);
            ga('create', 'UA-26723099-2', 'auto');
            ga('send', 'pageview');
        </script>
        <script src="./Handling private packages - Composer_files/docsearch.min.js"></script>
        <script>
            if (document.getElementById('docsearch')) {
                docsearch({
                    apiKey: '8f77725b2f2db4166675acc6e8ea3526',
                    indexName: 'getcomposer',
                    inputSelector: '#docsearch',
                    queryHook: function (query) {
                        var parts = query.split(' ');

                        parts = parts.map(function (part, index) {
                            var word = part.trim();

                            // quote --foo args so they are not parsed as negations but rather return actual results
                            if (word.length >= 2 && word[0] === '-' && word[1] === '-') {
                                word = '"' + word + (index === parts.length - 1 ? '' : '"');
                            }
                            // quote -x args
                            if (word.length == 2 && word[0] === '-') {
                                word = '"' + word + (index === parts.length - 1 ? '' : '"');
                            }

                            return word;
                        });

                        return parts.join(' ');
                    },
                    debug: false
                });
            }
        </script>
    

</body></html>